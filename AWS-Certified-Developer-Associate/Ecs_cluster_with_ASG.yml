AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to create an Amazon ECS Cluster with an
  EC2 Auto Scaling Group. This template creates a new VPC and networking
  resources for a self-contained ECS environment.

# ------------------------------------------------------------#
# Parameters
# ------------------------------------------------------------#
Parameters:
  ClusterName:
    Type: String
    Description: The name for your ECS Cluster.
    Default: MyECSCluster

  InstanceType:
    Type: String
    Description: EC2 instance type for the container instances.
    Default: t3.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
    ConstraintDescription: Must be a valid EC2 instance type.

  DesiredCapacity:
    Type: Number
    Description: Number of EC2 instances to run in your ECS cluster.
    Default: '2'

  MaxSize:
    Type: Number
    Description: Maximum number of EC2 instances that can be launched in your ECS cluster.
    Default: '4'

  MinSize:
    Type: Number
    Description: Minimum number of EC2 instances that can be launched in your ECS cluster.
    Default: '1'

  SshAllowedCidrIp:
    Type: String
    Description: >-
      The IP address range that can be used to SSH to the EC2 instances.
      WARNING: 0.0.0.0/0 is open to the world. Restrict this to your IP address for production.
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range (e.g., 192.168.1.0/24).

  LatestECSOptimizedAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: The latest ECS-optimized AMI ID for Amazon Linux 2.
    Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'

# ------------------------------------------------------------#
# Resources
# ------------------------------------------------------------#
Resources:
  # --- VPC and Networking ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-InternetGateway"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-Public-Subnet-1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-Public-Subnet-2"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-Public-RouteTable"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # --- IAM Role and Security Group for EC2 Instances ---
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-ECSInstanceRole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${ClusterName}-ECSInstanceProfile"
      Path: "/"
      Roles:
        - !Ref ECSInstanceRole

  ECSInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ClusterName}-InstanceSecurityGroup"
      GroupDescription: "Allows inbound traffic for ECS cluster instances"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allowing SSH access for troubleshooting.
        # WARNING: 0.0.0.0/0 is open to the world. Restrict this to your IP address for production.
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SshAllowedCidrIp
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-InstanceSecurityGroup"

  # --- ECS Cluster ---
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  # --- Launch Template for EC2 Instances ---
  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${ClusterName}-LaunchTemplate"
      LaunchTemplateData:
        ImageId: !Ref LatestECSOptimizedAmiId
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt ECSInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref ECSInstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config;

  # --- Auto Scaling Group for EC2 Instances ---
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      DesiredCapacity: !Ref DesiredCapacity
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-ECS-Instance"
          PropagateAtLaunch: true

# ------------------------------------------------------------#
# Outputs
# ------------------------------------------------------------#
Outputs:
  ClusterName:
    Description: "The name of the ECS Cluster"
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-ClusterName"

  ClusterArn:
    Description: "The ARN of the ECS Cluster"
    Value: !GetAtt ECSCluster.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ClusterArn"

  InstanceSecurityGroupId:
    Description: "The ID of the security group for the EC2 instances"
    Value: !Ref ECSInstanceSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-InstanceSecurityGroupId"
