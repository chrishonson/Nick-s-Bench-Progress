What is the primary purpose of AWS CloudFormation?<br>A) To store application code in a managed repository.<br>B) To provision and manage AWS infrastructure using code.<br>C) To monitor application performance and logs.<br>D) To provide a serverless execution environment for code.::<b>B) To provision and manage AWS infrastructure using code.</b><br>CloudFormation is a service that allows you to define your cloud infrastructure using code. It's a framework for deploying applications predictably [1].

Which of the following is a key benefit of using AWS CloudFormation for infrastructure management?<br>A) It automatically optimizes application code for better performance.<br>B) It allows version control and review of infrastructure changes through code.<br>C) It encrypts all data stored in AWS services by default.<br>D) It provides a built-in CI/CD pipeline for application deployments.::<b>B) It allows version control and review of infrastructure changes through code.</b><br>Benefits include Infrastructure as code, version control, and change review through code [1].

AWS CloudFormation helps with cost tracking because:<br>A) It automatically applies cost allocation tags to resources.<br>B) It only allows the creation of cost-optimized resources.<br>C) Each resource created within a stack is tagged, making cost tracking easier.<br>D) It provides real-time cost forecasting dashboards.::<b>C) Each resource created within a stack is tagged, making cost tracking easier.</b><br>Cost tracking is improved because each resource in a stack is tagged, making it easy to see the cost of a stack [1].

What are the two main languages supported for writing AWS CloudFormation templates?<br>A) XML and YAML<br>B) JSON and XML<br>C) YAML and JSON<br>D) Python and YAML::<b>C) YAML and JSON</b><br>YAML and JSON are the languages you can use for CloudFormation templates, with YAML generally preferred [2].

Which component is mandatory in every AWS CloudFormation template?<br>A) Parameters<br>B) Mappings<br>C) Resources<br>D) Outputs::<b>C) Resources</b><br>Resources are the core and mandatory component of your CloudFormation template, representing the AWS Components that will be created [2, 3].

How are AWS CloudFormation templates typically deployed or updated?<br>A) Templates are directly uploaded to the CloudFormation console and edited in place.<br>B) Templates are uploaded to S3 and then referenced by CloudFormation. Updates require re-uploading a new version to S3.<br>C) Templates are stored in AWS CodeCommit and automatically deployed when changes are pushed.<br>D) Templates are email attachments sent to the CloudFormation service endpoint.::<b>B) Templates are uploaded to S3 and then referenced by CloudFormation. Updates require re-uploading a new version to S3.</b><br>Templates must be uploaded in S3 and then referenced in CloudFormation. To update, you must re-upload a new version of the template to AWS [4].

What happens when an AWS CloudFormation stack is deleted?<br>A) Only the CloudFormation template is removed, leaving the created resources intact.<br>B) The stack is marked as inactive, but resources are preserved.<br>C) Every single artifact that was created by CloudFormation for that stack is deleted.<br>D) Resources are scaled down but not fully deleted.::<b>C) Every single artifact that was created by CloudFormation for that stack is deleted.</b><br>Deleting a stack deletes every single artifact that was created by CloudFormation [4].

What is the primary use case for the `Parameters` section in an AWS CloudFormation template?<br>A) Defining fixed variables within the template.<br>B) Declaring optional output values from the stack.<br>C) Providing dynamic inputs for the template that are user-specific.<br>D) Specifying conditions for resource creation.::<b>C) Providing dynamic inputs for the template that are user-specific.</b><br>Parameters are used for dynamic inputs for your template and are useful when values are user-specific [3, 5].

When would you prefer to use the `Mappings` section in an AWS CloudFormation template instead of `Parameters`?<br>A) When the values are user-specific and not known in advance.<br>B) When you need to reference values from resources created in other stacks.<br>C) When you need to define fixed variables that can be deduced from variables like Region or Environment.<br>D) When you need to define conditions for creating resources.::<b>C) When you need to define fixed variables that can be deduced from variables like Region or Environment.</b><br>Mappings are great when you know in advance all the values and they can be deduced from variables like Region or Environment. They are fixed variables within your template [5-7].

What is the main purpose of the `Outputs` section in a CloudFormation template?<br>A) To define parameters that users can input before stack creation.<br>B) To specify conditions under which resources should be created.<br>C) To declare values from the stack that can be viewed or imported by other stacks.<br>D) To map input values to fixed output values.::<b>C) To declare values from the stack that can be viewed or imported by other stacks.</b><br>The Outputs section declares optional output values that can be viewed in the console/CLI or imported into other stacks if exported [5, 8].

Which intrinsic function is used in CloudFormation to reference an output value that was exported from another CloudFormation stack?<br>A) `Fn::Ref`<br>B) `Fn::GetAtt`<br>C) `Fn::FindInMap`<br>D) `Fn::ImportValue`::<b>D) `Fn::ImportValue`</b><br>To leverage a value exported from one template within a second template, you use the `Fn::ImportValue` function [9].

What is the purpose of the `Conditions` section in an AWS CloudFormation template?<br>A) To define mapping variables based on environmental factors.<br>B) To control the creation of resources or outputs based on a condition.<br>C) To specify dynamic input parameters for the template.<br>D) To declare output values from the created resources.::<b>B) To control the creation of resources or outputs based on a condition.</b><br>Conditions are used to control the creation of resources or outputs based on a condition [9].

When using the `Fn::Ref` intrinsic function in CloudFormation, what does it return when referencing a Resource (like an EC2 instance)?<br>A) The ARN of the resource.<br>B) The physical ID of the underlying resource.<br>C) The logical ID of the resource defined in the template.<br>D) The value of a tag associated with the resource.::<b>B) The physical ID of the underlying resource.</b><br>When referencing a Resource, `Fn::Ref` returns the physical ID of the underlying resource (e.g., EC2 ID) [10].

Which CloudFormation intrinsic function allows you to retrieve an attribute (like the Availability Zone or Public IP) of a resource created within the template?<br>A) `Fn::Ref`<br>B) `Fn::GetAtt`<br>C) `Fn::FindInMap`<br>D) `Fn::Base64`::<b>B) `Fn::GetAtt`</b><br>`Fn::GetAtt` returns an attribute from a resource you create. You need to consult the documentation for available attributes [10].

Which intrinsic function is used to retrieve values from the `Mappings` section of a CloudFormation template?<br>A) `Fn::Ref`<br>B) `Fn::GetAtt`<br>C) `Fn::FindInMap`<br>D) `Fn::ImportValue`::<b>C) `Fn::FindInMap`</b><br>You use `Fn::FindInMap` to return a named value from a specific key within the Mappings section [7].

Which CloudFormation intrinsic function is useful for encoding data, such as passing data to an EC2 Instance's `UserData` property?<br>A) `Fn::Join`<br>B) `Fn::Sub`<br>C) `Fn::Base64`<br>D) `Fn::GetAtt`::<b>C) `Fn::Base64`</b><br>`Fn::Base64` converts a String to its Base64 representation and is used, for example, in the `UserData` property of an EC2 Instance [11].

Which of the following is a CloudFormation Pseudo Parameter available in any template?<br>A) `AWS::AccessKeyId`<br>B) `AWS::SecurityGroup`<br>C) `AWS::StackName`<br>D) `AWS::InstanceId`::<b>C) `AWS::StackName`</b><br>Important Pseudo Parameters include `AWS::AccountId`, `AWS::Region`, `AWS::StackId`, and `AWS::StackName` [6].

Why is YAML generally preferred over JSON for writing CloudFormation templates, according to the sources?<br>A) YAML supports more AWS resource types than JSON.<br>B) YAML allows for including comments and is more human-readable than JSON.<br>C) YAML templates are processed faster by CloudFormation.<br>D) JSON templates have a strict size limit that YAML does not.::<b>B) YAML allows for including comments and is more human-readable than JSON.</b><br>YAML is great in many ways, including supporting comments and being generally preferred over JSON for CloudFormation [2].

What is the recommended way to deploy CloudFormation templates for full automation?<br>A) Manually editing templates in the Infrastructure Composer and using the console.<br>B) Using the AWS CLI or a Continuous Delivery (CD) tool with YAML template files.<br>C) Uploading ZIP archives of templates via the AWS Management Console.<br>D) Executing SQL scripts to create AWS resources.::<b>B) Using the AWS CLI or a Continuous Delivery (CD) tool with YAML template files.</b><br>The automated way, using the AWS CLI or a Continuous Delivery (CD) tool with YAML files, is the recommended way for full automation [3].

CloudFormation supports declarative programming, which means:<br>A) You need to write code that explicitly defines the order in which resources are created.<br>B) You declare the desired state of your infrastructure, and CloudFormation figures out the necessary steps and ordering.<br>C) You use imperative programming languages like Python or Java to define your infrastructure.<br>D) You manually create resources, and CloudFormation documents them afterward.::<b>B) You declare the desired state of your infrastructure, and CloudFormation figures out the necessary steps and ordering.</b><br>CloudFormation offers declarative programming, meaning you don't need to figure out ordering and orchestration [1].
